plugins {
    id 'java'
    id 'jacoco'
    id 'application'
}

// name is set in settings.gradle
group 'security'
version '2.0.0'

repositories {
    mavenCentral()
}

// https://www.baeldung.com/gradle-sourcecompatiblity-vs-targetcompatibility
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.16.1'
    // or the latest version available
    implementation 'org.apache.logging.log4j:log4j-core:3.0.0-beta1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

// Commenting because it doesn't work well on TravisCI
test {
    testLogging {
// Make sure output from
// standard out or error is shown
// in Gradle output.
        showStandardStreams = true
    }

    // Set JVM arguments to include your agent
    jvmArgs = [
            '-javaagent:libs/InstrumentationAgent.jar' // Change this to your agent JAR path
    ]
}

// This library was built for Java 8 so it can be imported into Android as well.
// If you want to use a later version of Java, this should help point what to tweak.
gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xlint:deprecation,unchecked"
        }
    }
}

jacocoTestReport {
    reports {
        xml.required=true
        html.required=true
    }
}

check.dependsOn jacocoTestReport

application {
    mainClass.set(project.findProperty("chooseRole").toString())
}

// To create the JAR file with 'gradlew jar'
tasks.named('jar') {
    archiveFileName = "${project.name}-${System.getenv('VERSION') ?: project.version}.jar"
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': System.getenv('VERSION') ?: project.version
        )
    }
}

tasks.register('generateJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')
    options.docTitle = 'Homomorphic Encryption API'
}

// Define a task to run your Java application with the agent
tasks.register('runWithAgent', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    // Set JVM arguments to include your agent
    jvmArgs = [
            '-javaagent:libs/InstrumentationAgent.jar'
    ]
}

// Configure the 'run' task to depend on 'runWithAgent'
tasks.run.dependsOn('runWithAgent')